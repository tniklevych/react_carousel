{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","position","setPosition","isLastPosition","length","isDisabledButtonPrev","isDisabledButtonNext","getImgName","imgUrl","lastDotIndex","lastIndexOf","lastSlashIndex","imgName","slice","className","style","width","map","img","transform","transition","src","alt","type","onClick","disabled","Settings","setStep","setFrameSize","setItemWidth","setAnimationDuration","setInfinite","action","method","htmlFor","id","min","max","value","onChange","event","currentTarget","checked","target","App","useState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1de0e1f7.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ninterface CarouselProps {\n  images: string[]\n  step: number\n  frameSize: number\n  itemWidth: number\n  animationDuration: number\n  infinite: boolean\n  position: number\n  setPosition: (newPosition: number) => void\n}\n\nconst Carousel: React.FC<CarouselProps> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n  position,\n  setPosition,\n}) => {\n  const isLastPosition = images.length - frameSize;\n  const isDisabledButtonPrev = (infinite && frameSize === images.length)\n    || (position === 0 && !infinite);\n  const isDisabledButtonNext = (infinite && frameSize === images.length)\n    || (position === isLastPosition && !infinite);\n\n  const onButtonNext = () => {\n    if (position + step < isLastPosition) {\n      setPosition(position + step);\n    } else {\n      setPosition(isLastPosition);\n    }\n\n    if (infinite && position === isLastPosition) {\n      setPosition(0);\n    }\n  };\n\n  const onButtonPrev = () => {\n    if (position - step > 0) {\n      setPosition(position - step);\n    } else {\n      setPosition(0);\n    }\n\n    if (infinite && position === 0) {\n      setPosition(isLastPosition);\n    }\n  };\n\n  const getImgName = (imgUrl: string): string => {\n    const lastDotIndex = imgUrl.lastIndexOf('.');\n    const lastSlashIndex = imgUrl.lastIndexOf('/');\n    let imgName = '';\n\n    if (lastDotIndex !== -1 && lastSlashIndex !== -1) {\n      imgName = imgUrl.slice(lastSlashIndex + 1, lastDotIndex);\n    }\n\n    return imgName;\n  };\n\n  return (\n\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${frameSize * itemWidth}px`,\n      }}\n    >\n      <div className=\"Carousel__wrapper\">\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${itemWidth * images.length}px`,\n          }}\n        >\n          {images.map((img) => (\n            <li\n              key={getImgName(img)}\n              className=\"Carousel__item\"\n              style={{\n                transform: `translateX(${-position * itemWidth}px)`,\n                transition: `transform ${animationDuration}ms`,\n              }}\n            >\n              <img\n                src={img}\n                width={itemWidth}\n                className=\"Carousel__img\"\n                alt={getImgName(img)}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__btns\">\n        <button\n          type=\"button\"\n          className={`Carousel__btn ${isDisabledButtonPrev ? 'Carousel__btn-disabled' : ''}`}\n          onClick={onButtonPrev}\n          disabled={isDisabledButtonPrev}\n        >\n          Prev\n        </button>\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className={`Carousel__btn ${isDisabledButtonNext ? 'Carousel__btn-disabled' : ''}`}\n          onClick={onButtonNext}\n          disabled={isDisabledButtonNext}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './Settings.scss';\n\ninterface SettingsProps {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\ninterface SettingsStateProps extends SettingsProps {\n  setStep: (newStep: number) => void,\n  setFrameSize: (newFrameSize: number) => void,\n  setItemWidth: (newItemWidth: number) => void,\n  setAnimationDuration: (newAnimationDuration: number) => void,\n  setInfinite: (newInfinite: boolean) => void,\n  setPosition: (newPosition: number) => void,\n}\n\nconst Settings: React.FC<SettingsStateProps> = ({\n  images,\n  step,\n  setStep,\n  frameSize,\n  setFrameSize,\n  itemWidth,\n  setItemWidth,\n  animationDuration,\n  setAnimationDuration,\n  infinite,\n  setInfinite,\n  setPosition,\n}) => {\n  return (\n    <form\n      action=\"#\"\n      method=\"GET\"\n      className=\"SettingForm\"\n    >\n      <label htmlFor=\"stepId\" className=\"SettingForm__label\">\n        Step:\n        <input\n          id=\"stepId\"\n          type=\"number\"\n          className=\"SettingForm__input\"\n          min={1}\n          max={images.length - frameSize}\n          value={step}\n          onChange={(event) => {\n            setStep(+event.currentTarget.value);\n            setPosition(0);\n          }}\n        />\n      </label>\n      <label htmlFor=\"frameSizeId\" className=\"SettingForm__label\">\n        Frame size:\n        <input\n          id=\"fremeSizeId\"\n          type=\"number\"\n          className=\"SettingForm__input\"\n          min={1}\n          max={images.length}\n          value={frameSize}\n          onChange={(event) => {\n            setFrameSize(+event.currentTarget.value);\n            setPosition(0);\n          }}\n        />\n      </label>\n      <label htmlFor=\"itemWidthId\" className=\"SettingForm__label\">\n        Item width:\n        <input\n          id=\"itemWidthId\"\n          type=\"number\"\n          className=\"SettingForm__input\"\n          min={50}\n          step={5}\n          value={itemWidth}\n          onChange={(event) => {\n            setItemWidth(+event.currentTarget.value);\n            setPosition(0);\n          }}\n        />\n      </label>\n      <label htmlFor=\"animationDurationId\" className=\"SettingForm__label\">\n        Animation duration:\n        <input\n          id=\"animationDurationId\"\n          type=\"number\"\n          className=\"SettingForm__input\"\n          min={0}\n          step={100}\n          value={animationDuration}\n          onChange={(event) => {\n            setAnimationDuration(+event.currentTarget.value);\n            setPosition(0);\n          }}\n        />\n      </label>\n\n      <label htmlFor=\"infiniteId\" className=\"SettingForm__label\">\n        Infinite:\n        <input\n          id=\"infiniteId\"\n          type=\"checkbox\"\n          className=\"SettingForm__checkbox\"\n          checked={infinite}\n          onChange={(event) => {\n            setInfinite(event.target.checked);\n            setPosition(0);\n          }}\n        />\n      </label>\n    </form>\n  );\n};\n\nexport default Settings;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\nimport Settings from './components/Settings/Settings';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App: React.FC = () => {\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n  const [position, setPosition] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <h1\n        className=\"App__title\"\n        data-cy=\"title\"\n      >\n        Carousel with\n        {images.length}\n        images\n      </h1>\n\n      <Settings\n        images={images}\n        step={step}\n        setStep={setStep}\n        frameSize={frameSize}\n        setFrameSize={setFrameSize}\n        itemWidth={itemWidth}\n        setItemWidth={setItemWidth}\n        animationDuration={animationDuration}\n        setAnimationDuration={setAnimationDuration}\n        infinite={infinite}\n        setInfinite={setInfinite}\n        setPosition={setPosition}\n      />\n\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n        position={position}\n        setPosition={setPosition}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}